// TODO checkVersions should include the pom.xml in a project

buildscript {
  repositories { mavenCentral() }
  dependencies {
    classpath 'com.typesafe:config:1.2.0'
    classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.6'
  }
}

// The keys of xlDeployProjectData should match with repository name from the URL
ext {
  xlDeployProjectData = [
    [ 'cloud-pack',               [ url: 'git@github.com:xebialabs/cloud-pack.git', toUpdate: [ 'depcfg' ] ] ],
    [ 'xl-deploy',                [ url: 'git@github.com:xebialabs/xl-deploy.git', toUpdate: [ 'depcfg' ] ] ],
    [ 'xl-satellite',             [ url: 'git@github.com:xebialabs/xl-satellite.git', toUpdate: [ 'depcfg' ] ] ],
  ]
  ciPluginProjectData = [
    [ 'bamboo-xl-deploy-plugin',  [ url: 'git@github.com:xebialabs/bamboo-xl-deploy-plugin.git', toUpdate: [ 'depcfg', 'pom' ] ] ],
    [ 'maven-deployit-plugin',    [ url: 'git@github.com:xebialabs/maven-deployit-plugin.git', toUpdate: [ 'pom' ] ] ],
  ]
  middleWarePluginProjectData = [
    [ 'tomcat-plugin',            [ url: 'git@github.com:xebialabs/tomcat-plugin.git', toUpdate: [ 'depcfg' ] ] ],
    [ 'biztalk-plugin',           [ url: 'git@github.com:xebialabs/biztalk-plugin.git', toUpdate: [ 'depcfg' ] ] ],
    [ 'glassfish-plugin',         [ url: 'git@github.com:xebialabs/glassfish-plugin.git', toUpdate: [ 'depcfg' ] ] ],

    [ 'jbossas-plugin',           [ url: 'git@github.com:xebialabs/jbossas-plugin.git', toUpdate: [ 'depcfg' ] ] ],
    [ 'jbossdm-plugin',           [ url: 'git@github.com:xebialabs/jbossdm-plugin.git', toUpdate: [ 'depcfg' ] ] ],

    [ 'loadbalancer-plugin',      [ url: 'git@github.com:xebialabs/loadbalancer-plugin.git', toUpdate: [ 'depcfg' ] ] ],

    [ 'websphere-plugins',        [ url: 'git@github.com:xebialabs/websphere-plugins.git', toUpdate: [ 'depcfg' ] ] ],

    [ 'windows-plugin',           [ url: 'git@github.com:xebialabs/windows-plugin.git', toUpdate: [ 'depcfg' ] ] ],
    [ 'iis-plugin',               [ url: 'git@github.com:xebialabs/iis-plugin.git', toUpdate: [ 'depcfg' ] ] ],

    [ 'weblogic-plugins',         [ url: 'git@github.com:xebialabs/weblogic-plugins', toUpdate: [ 'depcfg' ] ] ],
    [ 'rpm-plugin',               [ url: 'git@github.com:xebialabs/rpm-plugin.git', toUpdate: [ 'depcfg' ] ] ],
  ]

  miscProjectData = [
    [ 'online-docs',              [ url: 'git@github.com:xebialabs/online-docs.git', toUpdate: [ 'depcfg' ] ] ],
    [ 'online-docs-jekyll',       [ url: 'git@github.com:xebialabs/online-docs-jekyll.git', toUpdate: [ 'depcfg' ] ] ],
    [ 'xl-config-compare',        [ url: 'git@github.com:xebialabs/xl-config-compare', toUpdate: [ 'depcfg' ] ] ],
    [ 'xl-download',              [ url: 'git@github.com:xebialabs/xl-download', toUpdate: [ 'depcfg' ] ] ],
    [ 'xl-release',               [ url: 'git@github.com:xebialabs/xl-release.git', toUpdate: [ 'depcfg' ], branchByXldBranch: [
        '4.0.x-maintenance': 'ignore',
        '4.5.x-maintenance': 'ignore',
        '5.0.x-maintenance': '4.5.x-maintenance',
    ] ] ],
  ]

  testData = [ [ 'temp4test',     [ url:'git@github.com:xebialabs/temp4test.git', toUpdate: [ 'depcfg', 'pom'] ] ] ]

  pluginProjectData = ciPluginProjectData + middleWarePluginProjectData
  projectData = xlDeployProjectData + pluginProjectData + miscProjectData // + testData

  versionProperties = [ 'xlPlatformVersion',
                        'licenseDatabaseVersion',
                        'xlDeployVersion',
                        'cloudPackVersion',
                        'docBaseStyleVersion',
                        'overthereVersion',
                        'overcastVersion',
                        'compareVersion']
  propToProject = [ 'xlPlatformVersion'     : 'xl-platform',
                    'xlDeployVersion'       : 'xl-deploy',
                    'licenseDatabaseVersion': 'license-database',
                    'cloudPackVersion'      : 'cloud-pack',
                    'docBaseStyleVersion'   : 'doc-base-style',
                    'overthereVersion'      : 'overthere',
                    'overcastVersion'       : 'overcast',
                    'compareVersion'        : 'xl-config-compare']

  numInconsistencies = 0
}

description = """
Use this gradle build to update the gradle/dependencies.conf, pom.xml and/or gradle
distribution URL's across many projects. The pom.xml has to have a special format
with a properties section with the same property names as the supported properties
as described below.

You can do single updates or update groups of projects.

Supported properties:
    ${versionProperties.join(',\n    ')}

If a property is not present in the dependencies.conf it will not be
added/updated.

So to update all XL Deploy dependencies:

    gradle groupUpdateXlDeployDependencies \\
      -PxlPlatformVersion=5.0.1 \\
      -Pbranch=master

Or using task abbreviations:

    gradle gUXD -PxlPlatformVersion=5.0.1 -PxlDeployVersion=5.0.1  -Pbranch=master

To update only the jenkins deployit plugin:

    gradle updateJenkinsDeployitPluginDependencies -PxlPlatformVersion=5.0.1 -Pbranch=master

To specify the branch you want to update use -Pbranch=<branch>. There is no
default by design.

    gradle groupUpdateXlDeployDependencies \\
      -PoverthereVersion=2.4.1 \\
      -Pbranch=4.0.x-maintenance

To update gradle wrappers use the update<plugin>Gradle or
groupUpdate<group>Gradle tasks with an additional property
'gradleDistributionUrl'. For instance:

    gradle groupUpdateXlDeployGradle \\
        -PgradleDistributionUrl=http://tech.xebialabs.com/xebialabs-gradle/xebialabs-gradle-1.11-1.2.21-bin.zip \\
        -Pbranch=master

Authentication

To authenticate generate a oauth token for your github account and give
it access to private repositories.

Put the token in your private gradle.properties with key

    githubOauthToken=<yourkey>

"""

gradle.buildStarted {
  numInconsistencies = 0
}
gradle.buildFinished { buildresult ->
  if(numInconsistencies > 0) {
    throw new RuntimeException("${numInconsistencies} inconsistencies found.")
  }
}

def projectName(def name) {
  def parts = name.split('-')
  parts*.capitalize().join()
}

def updateProjectDependencyTaskName(def name) {
  "update${projectName(name)}Dependencies"
}

def updateProjectGradleTaskName(def name) {
  "update${projectName(name)}Gradle"
}

import com.typesafe.config.ConfigFactory
import com.typesafe.config.ConfigValue
import com.typesafe.config.ConfigValueType
import com.typesafe.config.ConfigRenderOptions
import com.typesafe.config.ConfigValueFactory
import com.typesafe.config.ConfigParseOptions

projectData.each { repoName, metadata ->

  task "${updateProjectDependencyTaskName(repoName)}" {
    group = "Single project update "
    description = "Update"
  }

  def repoBranch = { ->
    String xldBranch = "${project.getProperty('branch')}".toString()
    metadata.branchByXldBranch?.get(xldBranch) ?: xldBranch
  }

  if( metadata.toUpdate.contains('depcfg') ) {
    def taskName = "update${projectName(repoName)}DepCfg"

    task "$taskName" (type: UpdateGithubFile) {
      group = "Single project gradle/dependency.conf update"

      organization = 'xebialabs'
      repository = repoName
      contentPath = 'gradle/dependencies.conf'
      branch = repoBranch
      username = githubOauthToken
      password = 'x-oauth-basic'

      doUpdate { content ->
        def cfg = ConfigFactory.parseString(content, ConfigParseOptions.defaults().setOriginDescription("Github project ${name} branch $branch gradle/dependencies.conf"))
        def updates = [:]
        def updatedToList = []

        versionProperties.each {
          def key = "xebialabs.dependencies.versions.${it}"
          if (project.hasProperty(it)) {
            def version = project.getProperty(it)
            if (cfg.hasPath(key)) {
              def currentVersion = cfg.getString(key)
              if (!version.equals(currentVersion)) {
                logger.info("Updating $it $currentVersion -> $version")
                updates[key] = version
                updatedToList += "${propToProject[it]}-$version"
              } else {
                logger.debug("Not updating $it no change")
              }
            }
          }
        }

        def newCfg = ConfigFactory.parseMap(updates, "updated values")
        cfg = newCfg.withFallback(cfg)

        def rendered = cfg.root().render(ConfigRenderOptions.defaults().setOriginComments(false).setJson(false))

        if (updatedToList.size() > 0) {
          return [content: rendered, message: updatedToList.join(', ')]
        } else {
          return [:]
        }
      }
    }
    tasks["${updateProjectDependencyTaskName(repoName)}"].dependsOn taskName
    tasks["${updateProjectDependencyTaskName(repoName)}"].description += " gradle/dependencies.conf"
  }

  if( metadata.toUpdate.contains('pom') ) {
    def taskName = "update${projectName(repoName)}Pom"

    task "$taskName" (type: UpdateGithubFile) {
      group = "Single project pom.xml update"

      organization = 'xebialabs'
      repository = repoName
      contentPath = 'pom.xml'
      branch = repoBranch
      username = githubOauthToken
      password = 'x-oauth-basic'

      doUpdate { content ->
        def newContent = new StringWriter()

        boolean inProperties = false
        def updates = [:]
        def updatedToList = []

        content.eachLine {
          if( !inProperties ) {
            if(it ==~ /^\s+<properties>\s*$/) {
              inProperties = true;
            }
            newContent.println it
          } else {
            if(it ==~ "^\\s+</properties>\\s*\$") {
              inProperties = false;
              newContent.println it
            } else {
              def matcher = it =~ /^(\s+)<(\w+)>(.+)<\/\w+>(\s*)$/
              if(matcher) {

                def lws = matcher[0][1]
                def prop = matcher[0][2]
                def version = matcher[0][3]
                def tws = matcher[0][4]

                versionProperties.each {
                  if (prop == it && project.hasProperty(it)) {
                    def newVersion = project.getProperty(it)
                    if (!version.equals(newVersion)) {
                      logger.info("Updating $it $version -> $newVersion")
                      updates[it] = newVersion
                      updatedToList += "${propToProject[it]}-$newVersion"
                      version = newVersion
                    } else {
                      logger.debug("Not updating $it no change")
                    }
                  }
                }
                newContent.println "${lws}<${prop}>${version}</${prop}>${tws}"
              } else {
                newContent.println it
              }
            }
          }
        }

        if (updatedToList.size() > 0) {
          return [content: newContent.toString(), message: updatedToList.join(', ')]
        } else {
          return [:]
        }
      }
    }
    tasks["${updateProjectDependencyTaskName(repoName)}"].dependsOn taskName
    tasks["${updateProjectDependencyTaskName(repoName)}"].description += " pom.xml"
  }

  // depcfg implies gradle wrapper
  if( metadata.toUpdate.contains('depcfg') ) {
    task "${updateProjectGradleTaskName(repoName)}"(type: UpdateGithubFile) {
      group = "Single project Gradle Wrapper Update"

      organization = 'xebialabs'
      repository = repoName
      contentPath = 'gradle/wrapper/gradle-wrapper.properties'
      branch = repoBranch
      username = githubOauthToken
      password = 'x-oauth-basic'

      doUpdate { content ->
        if (project.hasProperty('gradleDistributionUrl')) {
          def url = project.getProperty('gradleDistributionUrl')

          Properties props = new Properties();
          props.load(new StringReader(content))
          def currentUrl = props['distributionUrl']

          if (!url.equals(currentUrl)) {
            logger.info("Updating gradle distribution $currentUrl -> $url")
            props['distributionUrl'] = url
            def newContent = new StringWriter()
            props.store(newContent, null)
            String gradleZip = url.substring(url.lastIndexOf('/') + 1).replace('-bin.zip', '')
            return [content: newContent.toString(), message: gradleZip]
          } else {
            logger.debug("Not updating gradle distributionUrl no change (${currentUrl})")
          }
        } else {
          throw new RuntimeException("Property gradleDistributionUrl not set, don't know which gradle to update to.")
        }

        return [:]
      }
    }
  }
}

///// Dependency group update tasks

def getUpdateTask(def cfg, def projectName) {
  if( cfg.toUpdate.contains('depcfg') || cfg.toUpdate.contains('pom') )
    "${updateProjectDependencyTaskName(projectName)}"
  else
    null
}

def getPluginName(def cfg, def task) {
  (cfg.toUpdate.contains('depcfg') || cfg.toUpdate.contains('pom')) ? task : null
}

def nextLine = ',\n    '
task groupUpdateXlDeployDependencies(dependsOn: xlDeployProjectData.findResults { getUpdateTask(it[1], it[0]) }) {
  group "Group update"
  description = "Update ${xlDeployProjectData.findResults { getPluginName(it[1], it[0]) }.join(nextLine)}"
}

task groupUpdateCiPluginDependencies(dependsOn: ciPluginProjectData.findResults { getUpdateTask(it[1], it[0]) }) {
  group "Group update"
  description = "Update ${ciPluginProjectData.findResults { getPluginName(it[1], it[0]) }.join(nextLine)}"
}

task groupUpdateMiddleWarePluginDependencies(dependsOn: middleWarePluginProjectData.findResults { getUpdateTask(it[1], it[0]) }) {
  group "Group update"
  description = "Update ${middleWarePluginProjectData.findResults { getPluginName(it[1], it[0]) }.join(nextLine)}"
}

task groupUpdatePluginDependencies(dependsOn: pluginProjectData.findResults { getUpdateTask(it[1], it[0]) }) {
  group "Group update"
  description = "Update ${pluginProjectData.findResults { getPluginName(it[1], it[0]) }.join(nextLine)}"
}

task groupUpdateAllDependencies(dependsOn: projectData.findResults { getUpdateTask(it[1], it[0]) }) {
  group "Group update"
  description = "Update ${projectData.findResults { getPluginName(it[1], it[0]) }.join(nextLine)}"
}

///// Gradle group update tasks

task groupUpdateXlDeployGradle(dependsOn: xlDeployProjectData.findResults { it[1].toUpdate.contains('depcfg') ? "${updateProjectGradleTaskName(it[0])}" : null }) {
  group "Group gradle update"
  description = "Update ${xlDeployProjectData.findResults { it[1].toUpdate.contains('depcfg') ? it[0] : null }.join(nextLine)}"
}

task groupUpdatePluginGradle(dependsOn: pluginProjectData.findResults { it[1].toUpdate.contains('depcfg') ? "${updateProjectGradleTaskName(it[0])}" : null }) {
  group "Group gradle update"
  description = "Update ${pluginProjectData.findResults { it[1].toUpdate.contains('depcfg') ? it[0] : null }.join(nextLine)}"
}

task groupUpdateAllGradle(dependsOn: projectData.findResults { it[1].toUpdate.contains('depcfg') ? "${updateProjectGradleTaskName(it[0])}" : null }) {
  group "Group gradle update"
  description = "Update ${projectData.findResults { it[1].toUpdate.contains('depcfg') ? it[0] : null }.join(nextLine)}"
}

////// Check targets

def getGradleVersionFromUrl(def url) {
  def start = url.lastIndexOf('/') + 1
  def end = url.lastIndexOf('-bin.zip')
  if (start == -1) {
    start = 0
  }
  if (end == -1) {
    end = url.length()
  }
  url.substring(start, end)
}

task checkGradleWrappers(type: CheckGithubFile) {
  group = "Check that gradle wrappers are the same across projects"

  organization = 'xebialabs'
  repositories = projectData.findResults { it[1].toUpdate.contains('depcfg') ? it : null }
  contentPath = 'gradle/wrapper/gradle-wrapper.properties'
  branch = { -> project.getProperty('branch') }
  username = githubOauthToken
  password = 'x-oauth-basic'

  def nonMatching = []
  def previousUrl = null
  check { repository, content ->
    logger.debug("Checking $repository...")
    Properties props = new Properties();
    props.load(new StringReader(content))
    def currentUrl = props['distributionUrl']
    logger.info("${repository}: Previous URL=${previousUrl} Current URL=${currentUrl}")
    if (previousUrl == null) {
      previousUrl = currentUrl;
    } else {
      if (!currentUrl.equals(previousUrl)) {
        if (currentUrl == null) {
            logger.debug "No XL-gradle url for $repository; not registering it as non-matching!"
        } else {
            nonMatching += [[repository, previousUrl, currentUrl]]
        }
      }
    }
  }
  doLast {
    if (nonMatching.size() > 0) {
      project.ext.numInconsistencies += nonMatching.size()
      nonMatching.each { repo, goodUrl, url ->
        logger.error "$repo gradle version is ${getGradleVersionFromUrl(url)} not ${getGradleVersionFromUrl(goodUrl)}"
      }
    }
  }
}

def renderCfg(def cfg) {
  cfg.root().render(ConfigRenderOptions.defaults().setOriginComments(false).setJson(false))
}

task checkVersions(type: CheckGithubFile) {
  group = "Check that dependency versions are the same across projects"

  organization = 'xebialabs'
  repositories = projectData.findAll { it[1].toUpdate.contains('depcfg') }
  contentPath = 'gradle/dependencies.conf'
  branch = { -> project.getProperty('branch') }
  username = githubOauthToken
  password = 'x-oauth-basic'

  description = "Check versions in ${repositories.join(' ')}"

  def nonMatching = []
  def previousCfg = null
  check { repository, content ->
    def cfg = ConfigFactory.parseString(content, ConfigParseOptions.defaults().setOriginDescription("Github project ${repository} branch $branch gradle/dependencies.conf"))
    if (previousCfg == null) {
      logger.info("Repository $repository becomes starting point for versions: ${renderCfg(cfg)}")
      previousCfg = cfg
    } else {
      cfg.entrySet().each { Map.Entry<String, ConfigValue> entry ->
        String key = entry.getKey()

        // only check dependency versions
        if(key.startsWith('xebialabs.dependencies.versions')) {
          def value = null

          if (entry.getValue().valueType() == ConfigValueType.STRING) {
            value = cfg.getString(key)
          } else if (entry.getValue().valueType() == ConfigValueType.NUMBER) {
            value = cfg.getNumber(key).toString()
          } else {
            throw new RuntimeException("$repository gradle/dependencies.conf $key has unsupported type ${entry.getValue().valueType()}");
          }

          if (previousCfg.hasPath(key)) {
            def previousValue = previousCfg.getString(key)
            if (!previousValue.equals(value)) {
              nonMatching += [[repository, key, previousValue, value]]
            }
          } else {
            logger.debug("Repository $repository adding $key=$value to previousCfg")
            def update = [:]
            update[key] = value
            def newCfg = ConfigFactory.parseMap(update, "updated values")
            previousCfg = newCfg.withFallback(previousCfg)
          }
        }
      }
    }
  }
  doLast {
    if (nonMatching.size() > 0) {
      project.ext.numInconsistencies += nonMatching.size()
      nonMatching.each { repo, key, prevValue, value ->
        println "Repository $repo $key $prevValue != $value"
      }
    }
  }
}

import groovyx.net.http.RESTClient
import static groovyx.net.http.ContentType.JSON
import org.apache.http.*
import org.apache.http.protocol.*
import org.apache.http.auth.*

class UpdateGithubFile extends DefaultTask {
  String organization
  String repository
  def ignoreMissing = true
  String contentPath
  def branch

  String username
  String password

  Closure doUpdate

  @TaskAction
  def update() {
    // set auth header manually else it doesn't work
    def userPassBase64 = "${username}:${password}".toString().bytes.encodeBase64()

    if (! "${branch}".trim()) {
      throw new RuntimeException("Please specify the branch which you try to update, ex. -Pbranch=master")
    }

    def github = new RESTClient("https://api.github.com/").with {
      contentType = JSON
      defaultRequestHeaders.'Authorization' = "Basic $userPassBase64"
      defaultRequestHeaders.'Accept' = 'application/vnd.github.v3+json'
      // will not work without User-Agent!
      defaultRequestHeaders.'User-Agent' = 'UpdateGithubTask'
      handler.failure = { resp ->
        throw new RuntimeException("GitHub API Failure: ${resp.statusLine}")
      }
      delegate
    }
    def url = "/repos/$organization/$repository/contents/$contentPath"
    try {
      def response = github.get(path: url, query: ['ref': "${branch}".toString()])
      def content = new String(response.data.content.decodeBase64(), 'UTF-8');
      def sha = response.data.sha
      logger.debug("Loaded from '{}' (branch '{}'): '{}'", url, "${branch}".toString(), content)

      def updateMap = doUpdate content
      if (updateMap.size() > 0) {
        logger.debug("Updating with {}", updateMap)

        def body = ['content': updateMap.content.bytes.encodeBase64().toString(), 'message': updateMap.message.toString(), 'sha': sha, 'branch': "${branch}".toString()]
        logger.debug("Update request body: {}", body)

        def putResponse = github.put('path': url, 'body': body)
        logger.debug("Update response: {}", putResponse.data)
      } else {
        logger.debug("No update to do.")
      }
    } catch (RuntimeException e) {
      if(ignoreMissing) {
        logger.warn("Could not access repository {} => skipping", repository)
      } else {
        throw new RuntimeException("Failed to read from repository $repository ($branch)", e)
      }
    }
  }
}

class CheckGithubFile extends DefaultTask {
  String organization
  String contentPath
  def ignoreMissing = true
  def branch
  def repositories = []

  String username
  String password

  Closure check

  @TaskAction
  def check() {

    if (! "${branch}".trim()) {
      throw new RuntimeException("Please specify the branch which you try to update, ex. -Pbranch=master")
    }

    // set auth header manually else it doesn't work
    def userPassBase64 = "${username}:${password}".toString().bytes.encodeBase64()
    def github = new RESTClient("https://api.github.com/").with {
      contentType = JSON
      defaultRequestHeaders.'Authorization' = "Basic $userPassBase64"
      defaultRequestHeaders.'Accept' = 'application/vnd.github.v3+json'
      // will not work without User-Agent!
      defaultRequestHeaders.'User-Agent' = 'UpdateGithubTask'
      handler.failure = { resp ->
        throw new RuntimeException("GitHub API Failure: ${resp.statusLine}")
      }
      delegate
    }
    repositories.each { repositoryObject ->
      def repository = repositoryObject[0]
      def repoBranch = repositoryObject[1].branchByXldBranch?.get("$branch".toString()) ?: "$branch".toString()
      def url = "/repos/$organization/$repository/contents/$contentPath"
      def content = ""
      try {
        def response = github.get(path: url, query: ['ref': repoBranch])
        content = new String(response.data.content.decodeBase64(), 'UTF-8');
        def sha = response.data.sha
        logger.debug("Loaded from '{}' (branch '{}'): '{}'", url, repoBranch, content)
      } catch (RuntimeException e) {
        if(ignoreMissing) {
          logger.warn("Could not access repository {} => skipping", repository)
        } else {
          throw new RuntimeException("Failed to read from repository $repository ($repoBranch)", e)
        }
      }

      check repository, content
    }
  }
}
